// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  image         String?
  emailVerified DateTime?
  password      String?
  accounts      Account[]
  monitors      Monitor[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Monitor {
  id        String      @id @default(cuid())
  url       String      @unique
  paused    Boolean     @default(false)
  createdAt DateTime    @default(now())
  checks    Check[]
  incidents Incident[]
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Check {
  id           String   @id @default(cuid())
  status       String
  responseTime Int?
  createdAt    DateTime @default(now())
  monitorId    String
  monitor      Monitor  @relation(fields: [monitorId], references: [id], onDelete: Cascade)
}

model Incident {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  acknowledged Boolean  @default(false)
  monitorId    String
  monitor      Monitor  @relation(fields: [monitorId], references: [id], onDelete: Cascade)
}
